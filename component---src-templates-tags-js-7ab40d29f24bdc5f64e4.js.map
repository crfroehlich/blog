{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["Tags","pageContext","data","console","warn","tag","allMdx","edges","totalCount","tagHeader","map","node","slug","fields","title","frontmatter","key","to","pageQuery"],"mappings":"2FAAA,uFA0DeA,UAtDF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KAC3BC,QAAQC,KAAK,gCADyB,IAG9BC,EAAQJ,EAARI,IAH8B,EAKRH,EAAKI,OAA3BC,EAL8B,EAK9BA,MAAOC,EALuB,EAKvBA,WAETC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,uBACE,sBAAKI,GACL,sBACGF,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KAEAE,EAAUH,EAAKI,YAAfD,MAER,OACE,kBAAIE,IAAKJ,GACP,YAAC,IAAD,CAAMK,GAAIL,GAAOE,QAKzB,YAAC,IAAD,CAAMG,GAAG,iBAAT,kBA6BC,IAAMC,EAAS","file":"component---src-templates-tags-js-7ab40d29f24bdc5f64e4.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n// Components\nimport { Link, graphql } from \"gatsby\"\nconst Tags = ({ pageContext, data }) => {\n  console.warn('THIS _should_ !not! *happen*');\n\n  const { tag } = pageContext;\n\n  const { edges, totalCount } = data.allMdx;\n\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`;\n\n  return (\n    <div>\n      <h1>{tagHeader}</h1>\n      <ul>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n\n          const { title } = node.frontmatter\n\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul>\n      <Link to=\"/визуализации\">визуализации</Link>\n    </div>\n  )\n};\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMdx: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n        docsLocation\n      }\n    }\n    allMdx(\n      limit: 2000\n      sort: { fields: [frontmatter___metaDate], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          fields {\n            id\n            title\n            slug\n            date\n            tags\n            img\n          }\n          frontmatter {\n            metaTitle\n            metaDescription\n            metaDate\n          }\n        }\n      }\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }`;\n"],"sourceRoot":""}