{"componentChunkName":"component---src-templates-docs-js","path":"/2019/Code-Generation-Fail--An-all-the-king-s-horses-tragedy","result":{"data":{"site":{"siteMetadata":{"title":"Christopher Froehlich's Blog | Hiking My Desk","docsLocation":"https://github.com/crfroehlich/blog/tree/main/content"}},"mdx":{"fields":{"id":"4069151b-5221-5eb4-9bf7-ecdf61aa1e98","title":"Code Generation Fail: An all the king’s horses tragedy","slug":"/2019/Code-Generation-Fail--An-all-the-king-s-horses-tragedy"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Code Generation Fail: An all the king’s horses tragedy\",\n  \"metaTitle\": \"Code Generation Fail: An all the king’s horses tragedy\",\n  \"metaDate\": \"07/10/2019\",\n  \"metaDraft\": false,\n  \"tags\": [\"metadata\", \"retrospective\", \"code generation\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Sometimes best intentions and good ole fashioned elbow grease are no match against the tyrannical fist of Reality. In my \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/@christopher.r.froehlich/code-generation-connecting-t4-to-entity-framework-core-654e2a0933e8\"\n  }), \"previous post\"), \", I discussed some of the initial ambitions and achievements in my attempt to convert the Entity Framework Core + MVC project into a dynamically generated template using T4. The good news? T4 is a perfectly adequate way to generate code from templates. The bad news? There is no way to make this completely integrated in a pure\\xA0.NET Core project. What does this mean, and why is this a problem?\"), mdx(\"h3\", null, \"The Story\"), mdx(\"p\", null, \"Full disclosure: if you want something approximating a tldr; just skip to the next section.\"), mdx(\"p\", null, \"For starters, the beauty of\\xA0.NET Core is that I can compile and run a\\xA0.NET Core app as easily on my Pixelbook as I can on my Windows devices. Getting a Core app up and running is just a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git clone\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dotnet build\"), \" away! This simplicity is bruised, battered and beaten when we can\\u2019t run the transforms required to generate that code. In an ideal world, when I run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dotnet build\"), \" on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/crfroehlich/autoEcMvc\"\n  }), \"AutoEcMvc\"), \" solution, the CodeGeneration project would compile and output the generated code into the AutoEcMvc project, which would then compile.\"), mdx(\"p\", null, \"If this worked, the project could then drop seamlessly into Azure Pipelines which would automatically compile, test and deploy the project to my Azure app container! (It should be noted, I can still make this work, but it\\u2019s extra work that should be unnecessary).\"), mdx(\"p\", null, \"Before I dive into the full autopsy of the deceased dream, I\\u2019ll explain my temporary solution and a few alternatives that I considered. For reasons that I\\u2019ll explain momentarily, the only way for even \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"msbuild\"), \" to work with a T4 project is to base the project on\\xA0.NET Framework. In order to keep the T4 free from compilation issues (because Text Transformation happens \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"before\"), \" build, you can find yourself in a situation where the solution cannot compile without some minor hacking), I find it useful to keep the C# backing code for the templates in its own project. Unfortunately, the minimum project type that will work is\\xA0.NET Standard (.NET Framework will also work, but the goal is to get as close to\\xA0.NET Core as possible). For these reasons, my current solution\\u2019s solution has three projects, in build order: CodeGeneration (.NET Standard) > T4 (.NET Framework) > AutoEcMvc (.NET Core). CodeGeneration has only the utility functions required for the T4 project, which has only the metadata JSON and TT files, and AutoEcMvc has the user defined and generated content together. In another chapter, we\\u2019ll remove generated code from source control entirely, but for now I\\u2019m leaving it in place as a way to easily review and compare changes with the original project.\"), mdx(\"p\", null, \"With this configuration, msbuild works seamlessly and I\\u2019ll update my Azure Pipeline to use msbuild and get my CI/CD plans back on track. I\\u2019m less than thrilled with having to throw \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dotnet build\"), \" under the bus, but I\\u2019ve also spent more hours trying to crack this nut than I want\\u200A\\u2014\\u200Aand I have whales need fryin\\u2019.\"), mdx(\"p\", null, \"Before I completely abandoned the dream of a pure\\xA0.NET Core solution, I explored a few options. There is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/daveaglick/Scripty\"\n  }), \"Scripty\"), \", which \\u201Clets you use Roslyn-powered C# scripts for code generation. You can think of it as a scripted alternative to T4 templates.\\u201D While it sounds promising, the project hasn\\u2019t been updated in a while and seems to have outstanding issues with\\xA0.NET Core. There is also the issue of documentation\\u200A\\u2014\\u200Aany \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/daveaglick/Scripty/issues/104\"\n  }), \"examples\"), \" of converting a T4 template to Scripty would be enormously helpful. Another promising option was \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/atifaziz/t5\"\n  }), \"T5\"), \", but no amount of tinkering prevailed against the ineffable and inscrutable refusal from Core to comply. Finally, there is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/page?view=aspnetcore-2.2&tabs=visual-studio\"\n  }), \"scaffolding\"), \" built into ASP.NET Core, but this is specific to Razor pages and not really a way to keep generated code in sync with metadata in the way I want to use it.\"), mdx(\"p\", null, \"Absent other ideas, T4 still seems like the best approach without a major rewrite. I should note, my specific use of T4 is not terribly complicated, and it would be easy to ditch the templates altogether and simply write the code entirely in C#, but then it would cease to be generic and defeat the purpose of this little exercise. I may emerge from this experiment with a different opinion, but for now I\\u2019ll assume that T4 will remain the backbone of the project (until proven differently).\"), mdx(\"p\", null, \"As always, this has been a long winded series of asides, a slow and drifting detour from the main point: T4 and\\xA0.NET Core do not mix. The latter does not abide the former. There is hostility, vitriol and threats of malice aforethought between the two. How do I know this?\"), mdx(\"h3\", null, \"My Current \\u201CSolution\\u201D\"), mdx(\"p\", null, \"To understand the problems with trying to migrate T4 into\\xA0.NET Core, I think it useful to explain the challenges presented in\\xA0.NET Framework. There are two paths to text transformation.\"), mdx(\"p\", null, \"The first is a developer convenience baked directly into Visual Studio since at least 2015. When you add a new\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".tt\"), \" file into a project, VS immediately recognizes the template and offers a few convenience options for you as a developer: (1) whenever you save changes to the template, VS immediately runs text transform and the output is regenerated, (2) VS gives context menu options to manually transform (aka Run Custom Tool) and to debug the template, which will launch the debugger and allow you to set breakpoints anywhere, and (3) VS offers the option to run all transforms at the project/solution level. All of these features are hugely beneficial to the development of templates. But. And this is a big \\u201Cbut\\u201D.\"), mdx(\"p\", null, \"The second is through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"msbuild\"), \" which is what I would normally use in my CI pipeline. Msbuild launches text transform in a different context than VS, which means that the relative paths (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$(SolutionDir)\"), \" )that work in VS no longer work from msbuild.\"), mdx(\"p\", null, \"In order to reconcile the two different behaviors, we need to make some changes to the\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".csproj\"), \" file. Unfortunately, a project using\\xA0.NET Framework has to be unloaded to be edited, then reloaded. Personally, I edit the project file directly in VS Code and let VS trigger the reload warning after I save changes. This is tedious, but it eliminates a few right-clicks.\"), mdx(\"p\", null, \"If we start with a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/crfroehlich/AutoEcMvc/blob/master/T4/templates/imports.ttinclude\"\n  }), \"T4 import\"), \" that looks like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-t4\"\n  }), \"#><#@ assembly name=\\\"$(SolutionDir)CodeGeneration\\\\\\\\bin\\\\\\\\netstandard2.0\\\\\\\\CodeGeneration.Dll\\\"\\n#><#@ assembly name=\\\"$(SolutionDir)CodeGeneration\\\\\\\\bin\\\\\\\\netstandard2.0\\\\\\\\Newtonsoft.Json.Dll\\\"\\n#><#@ import namespace=\\\"Newtonsoft.Json\\\"\\n#><#@ import namespace=\\\"Newtonsoft.Json.Linq\\\"\\n#><#@ import namespace=\\\"CodeGeneration\\\" #>\\n\")), mdx(\"p\", null, \"we have two immediate problems. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$(SolutionDir)\"), \" cannot resolve outside of VS, and our 3rd party dependency on Newtonsoft will not be available from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bin\"), \" directory. Starting with the latter, you can add this into a property group in the project file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"<PropertyGroup>\\n  <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>\\n</PropertyGroup>\\n\")), mdx(\"p\", null, \"Now, all reference binaries will be copied into the build output directory.\"), mdx(\"p\", null, \"Next, the challenge of resolving the path to that output directory can be solved as well. A custom mapping is required, which is also possible with a little XML markup:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"<PropertyGroup>       <targetFolder>$(MSBuildProjectDirectory)\\\\\\\\..\\\\\\\\CodeGeneration\\\\\\\\bin\\\\\\\\netstandard2.0</targetFolder>\\n</PropertyGroup>\\n<ItemGroup>\\n  <T4ParameterValues Include=\\\"targetFolder\\\">\\n    <Value>$(targetFolder)</Value>\\n  </T4ParameterValues>\\n</ItemGroup>\\n\")), mdx(\"p\", null, \"Now, I can update the T4 imports to:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"#><#@ assembly name=\\\"$(targetFolder)\\\\\\\\CodeGeneration.Dll\\\"\\n#><#@ assembly name=\\\"$(targetFolder)\\\\\\\\Newtonsoft.Json.Dll\\\"\\n\")), mdx(\"p\", null, \"And this will work seamlessly between VS and msbuild. There are a few other changes to make, but these are much more clearly documented elsewhere. For reference here, you also need:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"<Import Project=\\\"$(MSBuildToolsPath)\\\\\\\\Microsoft.CSharp.targets\\\" />\\n<PropertyGroup>\\n  <!-- Get the Visual Studio version: -->\\n  <VisualStudioVersion Condition=\\\"'$(VisualStudioVersion)' == ''\\\">16.0</VisualStudioVersion>\\n  <!-- Keep the next element all on one line: -->\\n  <VSToolsPath Condition=\\\"'$(VSToolsPath)' == ''\\\">$(MSBuildExtensionsPath32)\\\\\\\\Microsoft\\\\\\\\VisualStudio\\\\\\\\v$(VisualStudioVersion)</VSToolsPath>\\n</PropertyGroup>\\n<!-- This is the important line: -->\\n<Import Project=\\\"$(VSToolsPath)\\\\\\\\TextTemplating\\\\\\\\Microsoft.TextTemplating.targets\\\" />\\n<PropertyGroup>\\n  <TransformOnBuild>true</TransformOnBuild>\\n  <OverwriteReadOnlyOutputFiles>true</OverwriteReadOnlyOutputFiles>\\n  <TransformOutOfDateOnly>false</TransformOutOfDateOnly>\\n  <RunPostBuildEvent>Always</RunPostBuildEvent>\\n</PropertyGroup>\\n\")), mdx(\"p\", null, \"This is the final glue to ensure that you get identical behavior when compiling the project from any direction.\"), mdx(\"p\", null, \"Once all these pieces are in place, msbuild should \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"just work\"), \".\"), mdx(\"p\", null, \"References:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.microsoft.com/en-us/visualstudio/modeling/t4-parameter-directive?view=vs-2019\"\n  }), \"T4 Parameter Directive\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.microsoft.com/en-us/visualstudio/modeling/code-generation-in-a-build-process?view=vs-2019#parameters\"\n  }), \"Pass build context data into the templates\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/clariuslabs/TransformOnBuild\"\n  }), \"TransformOnBuild\"), \" (I didn\\u2019t end up using this solution, but exploring the project helped me resolve some issues)\")), mdx(\"h3\", null, \"My Struggle\"), mdx(\"p\", null, \"The next time I run into this class of problem, I definitely want to track all of my uncommitted changes and correlate each attempted fix with the relevant errors that occur which drive me to all the URLs and searches for answers as I attempt each new iteration of the fix. Then, ideally, I could blog about each stage of the journey with a little more coherence. For now and for the sake of the reader, I will simply list all of the relevant bits (that I can find in my browser history) that have led me to the conclusion that (as of this moment) T4 and Core cannot coexist.\"), mdx(\"p\", null, \"Incomplete Solutions:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/mono/t4\"\n  }), \"Re-implementation of T4 in Mono\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://notquitepure.info/2018/12/12/T4-Templates-at-Build-Time-With-Dotnet-Core/\"\n  }), \"T4 Templates at Build Time with Dotnet Core\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://marketplace.visualstudio.com/items?itemName=TimMaes.ttexecuter\"\n  }), \"T4Executer\"))), mdx(\"p\", null, \"Relevant GitHub Issues:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/xamarin/TorchSharp/issues/27\"\n  }), \"dotnet build fails to generate TypeGeneration.cs on linux\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/mono/t4/issues/12\"\n  }), \"Add MSBuild targets package\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/dotnet/core/issues/2743\"\n  }), \"Several FileNotFoundException using Newtonsoft.Json inside T4 template\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/dotnet/core/issues/2000\"\n  }), \"FileNotFoundException (System.Runtime, Version=4.2.1.0) when reflecting in T4 template\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/nil4/dotnet-transform-xdt/issues/16\"\n  }), \"Package type \\u2018DotnetCliTool\\u2019 is not supported by project\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/mono/t4/issues/42\"\n  }), \"PlatformNotSupportedException with dotnet-t4-project-tool\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/dotnet-websharper/core/issues/903\"\n  }), \"build failing\\u200A\\u2014\\u200Aand what worked for me\"))), mdx(\"p\", null, \"Relevant StackOverflow Issues:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/17170080/t4-subtemplates-transformtext-not-working\"\n  }), \"T4 subtemplates TransformText() not working\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/47691299/texttemplating-target-in-a-net-core-project\"\n  }), \"TextTemplating target in a\\xA0.Net Core project\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/50471751/the-imported-project-c-program-files-dotnet-sdk-2-1-201-microsoft-visualstudio\"\n  }), \"The imported project \\u201CC:\", \"\\\\\", \"Program Files\", \"\\\\\", \"dotnet\", \"\\\\\", \"sdk\", \"\\\\\", \"2.1.201\", \"\\\\\", \"Microsoft\", \"\\\\\", \"VisualStudio\", \"\\\\\", \"v15.0\", \"\\\\\", \"WebApplications\", \"\\\\\", \"Microsoft.WebApplication.targets\\u201D was not found\"))), mdx(\"p\", null, \"Microsoft Docs:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.texttemplating.texttransformation?view=visualstudiosdk-2019\"\n  }), \"TextTransformation Class\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developercommunity.visualstudio.com/idea/535990/filenotfoundexception-systemruntime-version4210-wh.html\"\n  }), \"FileNotFoundException (System.Runtime, Version=4.2.1.0) when reflecting in T4 template in\\xA0.NET Core 2.1 app\"))), mdx(\"p\", null, \"As always, I hope this has helped someone with a similar quest. Please feel free to correct anything I have missed, suggest corrections or alternatives, or otherwise reach out to collaborate on solutions for this journey.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#the-story","title":"The Story"},{"url":"#my-current-solution","title":"My Current “Solution”"},{"url":"#my-struggle","title":"My Struggle"}]},"parent":{"__typename":"File","relativePath":"2019/Code-Generation-Fail--An-all-the-king-s-horses-tragedy.md"},"frontmatter":{"metaTitle":"Code Generation Fail: An all the king’s horses tragedy","metaDescription":null,"metaDate":"07/10/2019"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Welcome"}}},{"node":{"fields":{"slug":"/1998/mollie","title":"Mollie"}}},{"node":{"fields":{"slug":"/1998/lamplight","title":"Lamplight"}}},{"node":{"fields":{"slug":"/1998/mussel","title":"Mussel"}}},{"node":{"fields":{"slug":"/2000/beneath","title":"beneath"}}},{"node":{"fields":{"slug":"/2000/adjustments","title":"adjustments"}}},{"node":{"fields":{"slug":"/2000/blastphemy","title":"blastphemy"}}},{"node":{"fields":{"slug":"/2000/earnest","title":"earnest"}}},{"node":{"fields":{"slug":"/2000/in-end","title":"in the end"}}},{"node":{"fields":{"slug":"/2000/linger","title":"linger"}}},{"node":{"fields":{"slug":"/2000/mistake","title":"mistake"}}},{"node":{"fields":{"slug":"/2000/parched","title":"parched"}}},{"node":{"fields":{"slug":"/2000/on-bubbles","title":"on bubbles"}}},{"node":{"fields":{"slug":"/2000/time-sensitive","title":"time sensitive"}}},{"node":{"fields":{"slug":"/2000/toes","title":"toes"}}},{"node":{"fields":{"slug":"/2002/in-title","title":"In Title"}}},{"node":{"fields":{"slug":"/2003/cig_russian","title":"Can''t Talk No Jive"}}},{"node":{"fields":{"slug":"/2003/one-last-hoorah","title":"One Last Hoorah"}}},{"node":{"fields":{"slug":"/2003/purged-by-fire","title":"Purged By Fire"}}},{"node":{"fields":{"slug":"/2003/story-of-boy-and-his-ambition","title":"The Enemy (AKA Those Who Have Been Liberated) Revisited metaTitle: "}}},{"node":{"fields":{"slug":"/2003/the-swift-hand-of-the-enemy","title":"The Swift Hand of The Enemy (AKA Those Who Have Been Liberated)"}}},{"node":{"fields":{"slug":"/2003/war-against-the-enemy","title":"War Against the Enemy (AKA Those Who Have Been Liberated)"}}},{"node":{"fields":{"slug":"/2004/area-man-blows-second-chance-at-life","title":"Area Man Blows Second Chance at Life, Hopes for Third"}}},{"node":{"fields":{"slug":"/2003/wishing-wells-away","title":"Wishing Wells Away"}}},{"node":{"fields":{"slug":"/2004/area-man-confused-by-obscure-references","title":"Area Man Confused By Obscure \"Mullis\" References"}}},{"node":{"fields":{"slug":"/2004/local-news","title":"Local News"}}},{"node":{"fields":{"slug":"/2004/baal-is-dead-i-killed-him","title":"Baal is Dead; I Killed Him"}}},{"node":{"fields":{"slug":"/2004/local-news_9","title":"Local News"}}},{"node":{"fields":{"slug":"/2004/public-concern-rises-as-treatment-of","title":"Public Concern Rises as Treatment of Prisoners Declines"}}},{"node":{"fields":{"slug":"/2004/yes","title":"Yes!"}}},{"node":{"fields":{"slug":"/2005/eves-and-cusps","title":"Eves and Cusps"}}},{"node":{"fields":{"slug":"/2005/fellow-thebans","title":"Fellow Thebans"}}},{"node":{"fields":{"slug":"/2005/i-fought-giant-lizard-today","title":"I fought the giant lizard today"}}},{"node":{"fields":{"slug":"/2005/great-tidings","title":"Great Tidings"}}},{"node":{"fields":{"slug":"/2005/i-must-have-some-repressed-self","title":"\"W\"it"}}},{"node":{"fields":{"slug":"/2005/peanut-butter-and-sasquatch","title":"Peanut Butter and Sasquatch"}}},{"node":{"fields":{"slug":"/2006/bait","title":"Bait."}}},{"node":{"fields":{"slug":"/2005/obo-mne","title":"обо мне"}}},{"node":{"fields":{"slug":"/2006/can-see-my-tale","title":"can''t see my tale"}}},{"node":{"fields":{"slug":"/2006/elastic-vengeance","title":"elastic vengeance"}}},{"node":{"fields":{"slug":"/2006/lampshade-of-apocalypse","title":"lampshade of the apocalypse"}}},{"node":{"fields":{"slug":"/2006/rejected-personal-description-from-yahoo","title":"Rejected Personal Description from Yahoo"}}},{"node":{"fields":{"slug":"/2006/sea-of-rage","title":"Sea of Rage"}}},{"node":{"fields":{"slug":"/2006/see-to-shining-see","title":"See to Shining See"}}},{"node":{"fields":{"slug":"/2006/tails-of-apocalypse","title":"tails of the apocalypse"}}},{"node":{"fields":{"slug":"/2006/this-country-does-not-exist","title":"this country does noT exist"}}},{"node":{"fields":{"slug":"/2007/automakers-propose-cutting-emisions-in","title":"Automakers Propose Cutting Emisions in Half by Releasing Only Pure, Clean Carbon-Monoxide"}}},{"node":{"fields":{"slug":"/2007/bush-repunctuates-education-law-child","title":"Bush Repunctuates Education Law: \"No! Child... 'Left Behind'?\" Act"}}},{"node":{"fields":{"slug":"/2007/concerns-rise-as-expectations-lower","title":"Concerns Rise as Expectations Lower"}}},{"node":{"fields":{"slug":"/2007/cbs-introduces-on-demand","title":"CBS Introduces \"Life on Demand\""}}},{"node":{"fields":{"slug":"/2007/defer","title":"defer"}}},{"node":{"fields":{"slug":"/2007/forgotten-futures","title":"forgotten futures"}}},{"node":{"fields":{"slug":"/2007/fallujah","title":"Fallujah"}}},{"node":{"fields":{"slug":"/2007/glope","title":"glope"}}},{"node":{"fields":{"slug":"/2007/greek-god-vows-to-avenge-son-death","title":"Greek God Vows to Avenge Son''s Death"}}},{"node":{"fields":{"slug":"/2007/its_that_time_when_the_world_falls_in_love","title":"It's that time when the world falls in love"}}},{"node":{"fields":{"slug":"/2007/open-p2p-peer-to-peer-to-life","title":"Open P2P (Peer to Peer) to Life"}}},{"node":{"fields":{"slug":"/2007/laziness-breeds","title":"laziness breeds"}}},{"node":{"fields":{"slug":"/2007/pope-announces-begins-at-lust","title":"Pope Announces: \"Life Begins at Lust\""}}},{"node":{"fields":{"slug":"/2007/put-these-into-my-car","title":"Put These Into My Car"}}},{"node":{"fields":{"slug":"/2007/quit-me-thisly","title":"quit me thisly"}}},{"node":{"fields":{"slug":"/2007/pope-announces-revolutionary-only","title":"Pope Announces Revolutionary \"Abstinence Only Education\""}}},{"node":{"fields":{"slug":"/2007/thought-in-progress","title":"thought in progress"}}},{"node":{"fields":{"slug":"/2007/thurgling","title":"thurgling"}}},{"node":{"fields":{"slug":"/2008/a-comment-on-comments","title":"a comment on comments"}}},{"node":{"fields":{"slug":"/2008/a-dark-in-shot","title":"a dark in the shot"}}},{"node":{"fields":{"slug":"/2008/a-grieved-grievance","title":"a grieved grievance"}}},{"node":{"fields":{"slug":"/2008/a-moral-comments","title":"a moral"}}},{"node":{"fields":{"slug":"/2008/a-moral","title":"a moral"}}},{"node":{"fields":{"slug":"/2008/a-man-and-his-economy","title":"a man and his economy"}}},{"node":{"fields":{"slug":"/2008/awesome-pitiable-envy","title":"awesome pitiable envy"}}},{"node":{"fields":{"slug":"/2008/blief-or-belf","title":"blief or belf"}}},{"node":{"fields":{"slug":"/2008/burning-bush","title":"burning bush"}}},{"node":{"fields":{"slug":"/2008/eli-my-eli","title":"Eli, my Eli"}}},{"node":{"fields":{"slug":"/2008/circles-twice-removed","title":"circles twice removed"}}},{"node":{"fields":{"slug":"/2008/full-disclosure","title":"full disclosure"}}},{"node":{"fields":{"slug":"/2008/for-your-bucket-of-thoughts","title":"for your bucket of thoughts"}}},{"node":{"fields":{"slug":"/2008/hello-son","title":"hello, son"}}},{"node":{"fields":{"slug":"/2008/goodybye-randy-pausch","title":"Goodybye Randy Pausch "}}},{"node":{"fields":{"slug":"/2008/hogwash","title":"hogwash"}}},{"node":{"fields":{"slug":"/2008/i-love-twine","title":"i love twine"}}},{"node":{"fields":{"slug":"/2008/in-waking-hours","title":"in the waking hours"}}},{"node":{"fields":{"slug":"/2008/i-pity-them","title":"i pity them"}}},{"node":{"fields":{"slug":"/2008/license-to-hit","title":"License to *hit"}}},{"node":{"fields":{"slug":"/2008/like-father-like-father","title":"like father like father"}}},{"node":{"fields":{"slug":"/2008/out-of-mind-of-sight","title":"out of mind of sight"}}},{"node":{"fields":{"slug":"/2008/over-hill-and-through-woods","title":"over the hill and through the woods"}}},{"node":{"fields":{"slug":"/2008/presidential-politics-aside","title":"presidential politics aside"}}},{"node":{"fields":{"slug":"/2008/shine-and-rise","title":"shine and rise"}}},{"node":{"fields":{"slug":"/2008/the-blackess-of-winter","title":"the blackess of winter"}}},{"node":{"fields":{"slug":"/2008/thanksgiving","title":"Thanksgiving"}}},{"node":{"fields":{"slug":"/2008/the-folly-of-age","title":"the folly of age"}}},{"node":{"fields":{"slug":"/2008/this-present-opaqueness","title":"this present opaqueness"}}},{"node":{"fields":{"slug":"/2008/unleash-space","title":"unleash the space"}}},{"node":{"fields":{"slug":"/2009/eli-walks","title":"Eli Walks"}}},{"node":{"fields":{"slug":"/2009/meeting_melchilzedek","title":"Meeting Melchilzedek"}}},{"node":{"fields":{"slug":"/2009/palin-should-have-won","title":"palin should have won"}}},{"node":{"fields":{"slug":"/2010/alas","title":"alas"}}},{"node":{"fields":{"slug":"/2010/if-it-looks-like-duck-and-walks-like","title":"if it looks like a duck and walks like a duck, let''s call it a moose"}}},{"node":{"fields":{"slug":"/2009/year-new","title":"year, new"}}},{"node":{"fields":{"slug":"/2010/vancouver-winter-olympics-2010","title":"Vancouver! Winter! Olympics! 2010!"}}},{"node":{"fields":{"slug":"/2011/bubonics","title":"Affectation Without Action"}}},{"node":{"fields":{"slug":"/2011/equipment-failure","title":"Equipment Failure"}}},{"node":{"fields":{"slug":"/2011/how-to-build-mountain","title":"How to Build a Mountain"}}},{"node":{"fields":{"slug":"/2011/remember-to-look-up-and-write-down","title":"Remember to Look Up and Write Down"}}},{"node":{"fields":{"slug":"/2011/one-man-hiking-his-desk-makes-journey","title":"One Man Hiking His Desk Makes a Journey. Two Men Hiking Makes a Race."}}},{"node":{"fields":{"slug":"/2011/seeing-tree-for-forest","title":"Seeing the Tree for the Forest"}}},{"node":{"fields":{"slug":"/2011/sir-george-mountain","title":"Sir George Mountain"}}},{"node":{"fields":{"slug":"/2011/some-people-climb-everest-i-hike-my","title":"Some People Climb Everest; I Hike My Desk"}}},{"node":{"fields":{"slug":"/2011/the-audacity-of-despair","title":"The Audacity of Despair"}}},{"node":{"fields":{"slug":"/2011/this-is-end-of-world","title":"this is the end of the world"}}},{"node":{"fields":{"slug":"/2011/trail-mix","title":"Trail Mix"}}},{"node":{"fields":{"slug":"/2011/washed-up-on-shore-of-this-morning","title":"washed up on the shore of this morning"}}},{"node":{"fields":{"slug":"/2012/communicating-and-why-i-quit-email","title":"Communicating and Why I Quit Email (Episode 1)"}}},{"node":{"fields":{"slug":"/2012/complex-units-of-measure","title":"Complex Units of Measure"}}},{"node":{"fields":{"slug":"/2012/how-to-subclass-array-not-really","title":"How to Subclass an Array (Not Really)"}}},{"node":{"fields":{"slug":"/2012/on-competence","title":"On Competence"}}},{"node":{"fields":{"slug":"/2012/out_with_the_old_in_with_the_new_profile","title":"Out With the Old, In With the New (Profile)"}}},{"node":{"fields":{"slug":"/2012/performance-determinism-vs","title":"Performance! Determinism. Vs?"}}},{"node":{"fields":{"slug":"/2012/physical-books-and-such","title":"Physical Books (and Such)"}}},{"node":{"fields":{"slug":"/2012/the-cost-of-urgency","title":"The Cost of Urgency"}}},{"node":{"fields":{"slug":"/2012/your-hyperbole-is-too-large","title":"Your Hyperbole is Too Large"}}},{"node":{"fields":{"slug":"/2013/a-promise-to-indexeddb","title":"A Promise to IndexedDb"}}},{"node":{"fields":{"slug":"/2013/api-documentation-considered-evil","title":"From JsDoc to Github Pages in 27 easy steps (aka API Documentation Considered Evil)?"}}},{"node":{"fields":{"slug":"/2013/crunchy-frog-comments","title":"Crunchy Frog"}}},{"node":{"fields":{"slug":"/2013/crunchy-frog","title":"Crunchy Frog"}}},{"node":{"fields":{"slug":"/2013/currying-favor-with-partial-application","title":"Currying Favor with Partial Application to get JavaScript SQL"}}},{"node":{"fields":{"slug":"/2013/god-probably-probably-doesnt-use-your","title":"God Probably, *Probably*, Doesn''t Use Your App"}}},{"node":{"fields":{"slug":"/2013/good-reads","title":"Good Reads"}}},{"node":{"fields":{"slug":"/2013/javascript-aka-marlboro-country","title":"JavaScript (aka Marlboro Country)"}}},{"node":{"fields":{"slug":"/2013/keeping-promise-to-indexeddb","title":"Keeping a Promise to IndexedDb"}}},{"node":{"fields":{"slug":"/2013/making-sense-of-grunt-importing","title":"Making Sense of Grunt metaTitle: "}}},{"node":{"fields":{"slug":"/2013/revisiting-how-to-subclass-array-really","title":"Revisiting metaTitle: "}}},{"node":{"fields":{"slug":"/2013/stealing-trillion-dollars-hour-in-pure","title":"Stealing a Trillion Dollars an Hour in Pure JavaScript"}}},{"node":{"fields":{"slug":"/2013/the-audacity-of-trying","title":"The Audacity of Trying"}}},{"node":{"fields":{"slug":"/2013/the-greatest-heist-ever-conceived","title":"The Greatest Heist Ever Conceived"}}},{"node":{"fields":{"slug":"/2013/the-quick-molting-sweat-lodge-of-soul","title":"The Quick, Molting Sweat Lodge of the Soul"}}},{"node":{"fields":{"slug":"/2013/the-single-arity-aka-communicating-and","title":"The Single Arity (aka Communicating and why I Quit Email metaTitle: "}}},{"node":{"fields":{"slug":"/2017/Apeiron-by-Thales-of-Miletus","title":"Apeiron by Thales of Miletus"}}},{"node":{"fields":{"slug":"/2017/Arkh--by-Heraclitus-of-Ephesus","title":"Arkhē by Heraclitus of Ephesus"}}},{"node":{"fields":{"slug":"/2017/Code-Generation--There-and-Back-Again","title":"Code Generation: There and Back Again"}}},{"node":{"fields":{"slug":"/2017/Currying-Favor-with-Partial-Application-to-get-JavaScript-SQL","title":"Currying Favor with Partial Application to get JavaScript SQL"}}},{"node":{"fields":{"slug":"/2017/How-to-Lose-an-Employee-in-10-Seconds-or-Less","title":"How to Lose an Employee in 10 Seconds or Less"}}},{"node":{"fields":{"slug":"/2017/Meeting-Melchizedek","title":"Meeting Melchizedek"}}},{"node":{"fields":{"slug":"/2017/The-Tetraktys-by-Pythagoras","title":"The Tetraktys by Pythagoras"}}},{"node":{"fields":{"slug":"/2017/this-is-the-end-of-the-world","title":"this is the end of the world"}}},{"node":{"fields":{"slug":"/2017/washed-up-on-the-shore-of-this-morning","title":"washed up on the shore of this morning"}}},{"node":{"fields":{"slug":"/2018/Remoting--It-s-even-better-and-even-worse-than-you-expected","title":"Remoting: It’s even better and even worse than you expected"}}},{"node":{"fields":{"slug":"/2018/The-Solstice-Squid","title":"The Solstice Squid"}}},{"node":{"fields":{"slug":"/2019/Code-Generation--Connecting-T4-to-Entity-Framework-Core","title":"Code Generation: Connecting T4 to Entity Framework Core"}}},{"node":{"fields":{"slug":"/2019/Code-Generation-Fail--An-all-the-king-s-horses-tragedy","title":"Code Generation Fail: An all the king’s horses tragedy"}}},{"node":{"fields":{"slug":"/2020/blogging_to_the_oldies","title":"Blogging to the Oldies"}}},{"node":{"fields":{"slug":"/2020/oscar","title":"Oscar"}}},{"node":{"fields":{"slug":"/2009/something-worth-sharing","title":"something worth sharing"}}},{"node":{"fields":{"slug":"/2009/wishing-and-unwishing","title":"wishing and unwishing"}}}]}},"pageContext":{"id":"4069151b-5221-5eb4-9bf7-ecdf61aa1e98"}},"staticQueryHashes":["2221665114","2221665114","3706406642","3706406642","417421954","417421954"]}